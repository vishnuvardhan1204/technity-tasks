1. The function that creates Regex objects is re.compile().

2. Raw strings are often used when creating regex objects so that '\' can 
   be considered as part of string instead of assuming it as an escape character.

3. search() method returns a special match if a specific pattern is found in string
   or returns None if pattern is not found.

4. To get the actual strings that match the pattern from a Match object we use group() method.

5. Group 0 -> (\d\d\d)-(\d\d\d-\d\d\d\d)
   Group 1 -> (\d\d\d)
   Group 2 -> (\d\d\d-\d\d\d\d)

6. To specify that we want a regex to match actual parentheses and period characters
   we escape the character with a blackslash '\'
   Eg: \( ,\)

7. When findall() method is used to call on a regex with no groups it returns a list of strings.
   If it used to call on a regex with groups it returns a list of tuples of strings.

8. In regular expressions '|' is used to represent "OR" operator. It allows you to specify multiple
   alternatives for matching within  a single pattern.

9. In regular expressions '?' is used for optional matching and lazy/non-greedy matching.

10. In regular expressions '+' denotes that the preceeding element must be present atleast once or morethan that.
    '*' denotes that the preceeding element may or may not present making it as optional matching.

11. In regular expressions {3} specifies exactly 3 occurrences of the preceding element.
    {3,5} specifies a range of 3 to 5 occurrences of the preceding element.

12. In regular expressions:
    \d -> match a digit
    \w -> match a word  
    \s -> match a space

13. In regular expressions:
    \D -> match anything except a digit
    \W -> match anything except a word
    \S -> match anything except a space

14. .* is a greedy quantifier that matches as much text as possible.
    .*? is a non-greedy/lazy quantifier that matches as least text as possible.

15. The character class syntax to match all numbers and lowercase letters is [0-9a-z]

16. To make a regular expression case-insensitive we use 're.IGNORECASE' or 're.I' as a second
    argument to the methods like re.search() or re.findall().

17. . character normally matches every character except a newline.
    When you pass re.DOTALL as a second argument it matches every character including newline.

18. It returns 'X drummers, X pipers, X rings, X hens'

19. Passing re.VERBOSE as a second argument allows you to write more readable expressions by ignoring
    white spaces and adding comments.

20. re.compile(r'^\d{1,3}(,\d{3})*$')

21. re.compile(r'^[A-Z][a-z]* Watanabe$')

22. re.compile(r'^(Alice|Bob|Carol) (eats|pets|throws) (apples|cats|baseballs)\.$', re.IGNORECASE)